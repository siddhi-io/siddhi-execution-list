{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Siddhi Execution List The siddhi-execution-list extension is a Siddhi extension that provides capability to generate and manipulate list data objects. For information on Siddhi and it's features refer Siddhi Documentation . Download Versions with group id io.siddhi.extension.* from here . Latest API Docs Latest API Docs is 1.0.2 . Features collect ( Aggregate Function ) Collects multiple values to construct a list. merge ( Aggregate Function ) Collects multiple lists to merge as a single list. add ( Function ) Function returns the updated list after adding the given value. addAll ( Function ) Function returns the updated list after adding all the values from the given list. clear ( Function ) Function returns the cleared list. clone ( Function ) Function returns the cloned list. contains ( Function ) Function checks whether the list contains the specific value. containsAll ( Function ) Function checks whether the list contains all the values in the given list. containsAny ( Function ) Function checks whether the two specified lists have any common elements. create ( Function ) Function creates a list containing all values provided. get ( Function ) Function returns the value at the specific index, null if index is out of range. indexOf ( Function ) Function returns the last index of the given element. isEmpty ( Function ) Function checks if the list is empty. isList ( Function ) Function checks if the object is type of a list. lastIndexOf ( Function ) Function returns the index of the given value. remove ( Function ) Function returns the updated list after removing the element with the specified value. removeAll ( Function ) Function returns the updated list after removing all the element with the specified list. removeByIndex ( Function ) Function returns the updated list after removing the element with the specified index. retainAll ( Function ) Function returns the updated list after retaining all the elements in the specified list. setValue ( Function ) Function returns the updated list after replacing the element in the given index by the given value. size ( Function ) Function to return the size of the list. sort ( Function ) Function returns lists sorted in ascending or descending order. tokenize ( Stream Processor ) Tokenize the list and return each key, value as new attributes in events Dependencies There are no other dependencies needed for this extension. Installation For installing this extension on various Siddhi execution environments refer Siddhi documentation section on adding extensions . Support and Contribution We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Information"},{"location":"#siddhi-execution-list","text":"The siddhi-execution-list extension is a Siddhi extension that provides capability to generate and manipulate list data objects. For information on Siddhi and it's features refer Siddhi Documentation .","title":"Siddhi Execution List"},{"location":"#download","text":"Versions with group id io.siddhi.extension.* from here .","title":"Download"},{"location":"#latest-api-docs","text":"Latest API Docs is 1.0.2 .","title":"Latest API Docs"},{"location":"#features","text":"collect ( Aggregate Function ) Collects multiple values to construct a list. merge ( Aggregate Function ) Collects multiple lists to merge as a single list. add ( Function ) Function returns the updated list after adding the given value. addAll ( Function ) Function returns the updated list after adding all the values from the given list. clear ( Function ) Function returns the cleared list. clone ( Function ) Function returns the cloned list. contains ( Function ) Function checks whether the list contains the specific value. containsAll ( Function ) Function checks whether the list contains all the values in the given list. containsAny ( Function ) Function checks whether the two specified lists have any common elements. create ( Function ) Function creates a list containing all values provided. get ( Function ) Function returns the value at the specific index, null if index is out of range. indexOf ( Function ) Function returns the last index of the given element. isEmpty ( Function ) Function checks if the list is empty. isList ( Function ) Function checks if the object is type of a list. lastIndexOf ( Function ) Function returns the index of the given value. remove ( Function ) Function returns the updated list after removing the element with the specified value. removeAll ( Function ) Function returns the updated list after removing all the element with the specified list. removeByIndex ( Function ) Function returns the updated list after removing the element with the specified index. retainAll ( Function ) Function returns the updated list after retaining all the elements in the specified list. setValue ( Function ) Function returns the updated list after replacing the element in the given index by the given value. size ( Function ) Function to return the size of the list. sort ( Function ) Function returns lists sorted in ascending or descending order. tokenize ( Stream Processor ) Tokenize the list and return each key, value as new attributes in events","title":"Features"},{"location":"#dependencies","text":"There are no other dependencies needed for this extension.","title":"Dependencies"},{"location":"#installation","text":"For installing this extension on various Siddhi execution environments refer Siddhi documentation section on adding extensions .","title":"Installation"},{"location":"#support-and-contribution","text":"We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Support and Contribution"},{"location":"license/","text":"Copyright (c) 2019 WSO2 Inc. ( http://www.wso2.org ) All Rights Reserved. WSO2 Inc. licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. ------------------------------------------------------------------------- Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. License shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. Licensor shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. Legal Entity shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, control means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. You (or Your ) shall mean an individual or Legal Entity exercising permissions granted by this License. Source form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. Object form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. Work shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). Derivative Works shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. Contribution shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, submitted means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as Not a Contribution. Contributor shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a NOTICE text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","title":"License"},{"location":"api/1.0.0/","text":"API Docs - v1.0.0 Tested Siddhi Core version: 5.1.4 It could also support other Siddhi Core minor versions. List collect (Aggregate Function) Collects multiple values to construct a list. Syntax OBJECT list:collect( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) OBJECT list:collect( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value, BOOL is.distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value Value of the list element OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes is.distinct If true only distinct elements are collected false BOOL Yes Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(10) select list:collect(symbol) as stockSymbols insert into OutputStream; For the window expiry of 10 events, the collect() function will collect attributes of symbol to a single list and return as stockSymbols. merge (Aggregate Function) Collects multiple lists to merge as a single list. Syntax OBJECT list:merge( OBJECT list) OBJECT list:merge( OBJECT list, BOOL is.distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list List to be merged OBJECT No Yes is.distinct Whether to return list with distinct values false BOOL Yes Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(2) select list:merge(list) as stockSymbols insert into OutputStream; For the window expiry of 2 events, the merge() function will collect attributes of list and merge them to a single list, returned as stockSymbols. add (Function) Function returns the updated list after adding the given value. Syntax OBJECT list:add( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) OBJECT list:add( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to which the value should be added. OBJECT No Yes value The value to be added. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes index The index in which the value should to be added. last INT Yes Yes Examples EXAMPLE 1 list:add(stockSymbols, 'IBM') Function returns the updated list after adding the value IBM in the last index. EXAMPLE 2 list:add(stockSymbols, 'IBM', 0) Function returns the updated list after adding the value IBM in the 0th index`. addAll (Function) Function returns the updated list after adding all the values from the given list. Syntax OBJECT list:addAll( OBJECT to.list, OBJECT from.list) OBJECT list:addAll( OBJECT to.list, OBJECT from.list, BOOL is.distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.list The list into which the values need to copied. OBJECT No Yes from.list The list from which the values are copied. OBJECT No Yes is.distinct If true returns list with distinct values false BOOL Yes Yes Examples EXAMPLE 1 list:putAll(toList, fromList) If toList contains values ('IBM', 'WSO2), and if fromList contains values ('IBM', 'XYZ') then the function returns updated toList with values ('IBM', 'WSO2', 'IBM', 'XYZ'). EXAMPLE 2 list:putAll(toList, fromList, true) If toList contains values ('IBM', 'WSO2), and if fromList contains values ('IBM', 'XYZ') then the function returns updated toList with values ('IBM', 'WSO2', 'XYZ'). clear (Function) Function returns the cleared list. Syntax OBJECT list:clear( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list which needs to be cleared OBJECT No Yes Examples EXAMPLE 1 list:clear(stockDetails) Returns an empty list. clone (Function) Function returns the cloned list. Syntax OBJECT list:clone( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to which needs to be cloned. OBJECT No Yes Examples EXAMPLE 1 list:clone(stockSymbols) Function returns cloned list of stockSymbols. contains (Function) Function checks whether the list contains the specific value. Syntax BOOL list:contains( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked on whether it contains the value or not. OBJECT No Yes value The value that needs to be checked. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:contains(stockSymbols, 'IBM') Returns 'true' if the stockSymbols list contains value IBM else it returns false . containsAll (Function) Function checks whether the list contains all the values in the given list. Syntax BOOL list:containsAll( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked on whether it contains all the values or not. OBJECT No Yes given.list The list which contains all the values to be checked. OBJECT No Yes Examples EXAMPLE 1 list:containsAll(stockSymbols, latestStockSymbols) Returns 'true' if the stockSymbols list contains values in latestStockSymbols else it returns false . create (Function) Function creates a list containing all values provided. Syntax OBJECT list:create() OBJECT list:create( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value1) OBJECT list:create( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value1, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value1 Value 1 OBJECT INT LONG FLOAT DOUBLE BOOL STRING Yes Yes Examples EXAMPLE 1 list:create(1, 2, 3, 4, 5, 6) This returns a list with values 1 , 2 , 3 , 4 , 5 and 6 . EXAMPLE 2 list:create() This returns an empty list. get (Function) Function returns the value at the specific index, null if index is out of range. Syntax OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING list:get( OBJECT list, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list Attribute containing the list OBJECT No Yes index Index of the element INT No Yes Examples EXAMPLE 1 list:get(stockSymbols, 1) This returns the element in the 1st index in the stockSymbols list. indexOf (Function) Function returns the last index of the given element. Syntax INT list:indexOf( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to be checked to get index of an element. OBJECT No Yes value Value for which last index needs to be identified. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:indexOf(stockSymbols. `IBM`) Returns the last index of the element IBM if present else it returns -1. isEmpty (Function) Function checks if the list is empty. Syntax BOOL list:isEmpty( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked whether it's empty or not. OBJECT No Yes Examples EXAMPLE 1 list:isEmpty(stockSymbols) Returns 'true' if the stockSymbols list is empty else it returns false . isList (Function) Function checks if the object is type of a list. Syntax BOOL list:isList( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The argument the need to be determined whether it's a list or not. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:isList(stockSymbols) Returns 'true' if the stockSymbols is and an instance of java.util.List else it returns false . lastIndexOf (Function) Function returns the index of the given value. Syntax INT list:lastIndexOf( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to be checked to get index of an element. OBJECT No Yes value Value for which last index needs to be identified. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:lastIndexOf(stockSymbols. `IBM`) Returns the last index of the element IBM if present else it returns -1. remove (Function) Function returns the updated list after removing the element with the specified value. Syntax OBJECT list:remove( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes value The value of the element that needs to removed. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:remove(stockSymbols, 'IBM') This returns the updated list, stockSymbols after stockSymbols the value IBM . removeAll (Function) Function returns the updated list after removing all the element with the specified list. Syntax OBJECT list:removeAll( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes given.list The list with all the elements that needs to removed. OBJECT No Yes Examples EXAMPLE 1 list:removeAll(stockSymbols, latestStockSymbols) This returns the updated list, stockSymbols after removing all the values in latestStockSymbols. removeByIndex (Function) Function returns the updated list after removing the element with the specified index. Syntax OBJECT list:removeByIndex( OBJECT list, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes index The index of the element that needs to removed. INT No Yes Examples EXAMPLE 1 list:removeByIndex(stockSymbols, 0) This returns the updated list, stockSymbols after removing value at 0 th index. retainAll (Function) Function returns the updated list after retaining all the elements in the specified list. Syntax OBJECT list:retainAll( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes given.list The list with all the elements that needs to reatined. OBJECT No Yes Examples EXAMPLE 1 list:retainAll(stockSymbols, latestStockSymbols) This returns the updated list, stockSymbols after retaining all the values in latestStockSymbols. setValue (Function) Function returns the updated list after replacing the element in the given index by the given value. Syntax OBJECT list:setValue( OBJECT list, INT index, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to which the value should be updated. OBJECT No Yes index The index in which the value should to be updated. INT No Yes value The value to be updated with. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:set(stockSymbols, 0, 'IBM') Function returns the updated list after replacing the value at 0th index with the value IBM size (Function) Function to return the size of the list. Syntax INT list:size( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list for which size should be returned. OBJECT No Yes Examples EXAMPLE 1 list:size(stockSymbols) Returns size of the stockSymbols list. sort (Function) Function returns lists sorted in ascending or descending order. Syntax OBJECT list:sort( OBJECT list) OBJECT list:sort( OBJECT list, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list which should be sorted. OBJECT No Yes order Order in which the list needs to be sorted (ASC/DESC/REV). REV STRING Yes No Examples EXAMPLE 1 list:sort(stockSymbols) Function returns the sorted list in ascending order. EXAMPLE 2 list:sort(stockSymbols, 'DESC') Function returns the sorted list in descending order. tokenize (Stream Processor) Tokenize the list and return each key, value as new attributes in events Syntax list:tokenize( OBJECT list) list:tokenize( OBJECT list, OBJECT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list Array list which needs to be tokenized OBJECT No Yes Extra Return Attributes Name Description Possible Types index Index of an entry consisted in the list INT value Value of an entry consisted in the list OBJECT Examples EXAMPLE 1 list:tokenize(customList) If custom list contains ('WSO2', 'IBM', 'XYZ') elements, then tokenize function will return 3 events with value attributes WSO2, IBM and XYZ respectively.","title":"1.0.0"},{"location":"api/1.0.0/#api-docs-v100","text":"Tested Siddhi Core version: 5.1.4 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.0.0"},{"location":"api/1.0.0/#list","text":"","title":"List"},{"location":"api/1.0.0/#collect-aggregate-function","text":"Collects multiple values to construct a list. Syntax OBJECT list:collect( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) OBJECT list:collect( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value, BOOL is.distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value Value of the list element OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes is.distinct If true only distinct elements are collected false BOOL Yes Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(10) select list:collect(symbol) as stockSymbols insert into OutputStream; For the window expiry of 10 events, the collect() function will collect attributes of symbol to a single list and return as stockSymbols.","title":"collect (Aggregate Function)"},{"location":"api/1.0.0/#merge-aggregate-function","text":"Collects multiple lists to merge as a single list. Syntax OBJECT list:merge( OBJECT list) OBJECT list:merge( OBJECT list, BOOL is.distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list List to be merged OBJECT No Yes is.distinct Whether to return list with distinct values false BOOL Yes Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(2) select list:merge(list) as stockSymbols insert into OutputStream; For the window expiry of 2 events, the merge() function will collect attributes of list and merge them to a single list, returned as stockSymbols.","title":"merge (Aggregate Function)"},{"location":"api/1.0.0/#add-function","text":"Function returns the updated list after adding the given value. Syntax OBJECT list:add( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) OBJECT list:add( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to which the value should be added. OBJECT No Yes value The value to be added. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes index The index in which the value should to be added. last INT Yes Yes Examples EXAMPLE 1 list:add(stockSymbols, 'IBM') Function returns the updated list after adding the value IBM in the last index. EXAMPLE 2 list:add(stockSymbols, 'IBM', 0) Function returns the updated list after adding the value IBM in the 0th index`.","title":"add (Function)"},{"location":"api/1.0.0/#addall-function","text":"Function returns the updated list after adding all the values from the given list. Syntax OBJECT list:addAll( OBJECT to.list, OBJECT from.list) OBJECT list:addAll( OBJECT to.list, OBJECT from.list, BOOL is.distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.list The list into which the values need to copied. OBJECT No Yes from.list The list from which the values are copied. OBJECT No Yes is.distinct If true returns list with distinct values false BOOL Yes Yes Examples EXAMPLE 1 list:putAll(toList, fromList) If toList contains values ('IBM', 'WSO2), and if fromList contains values ('IBM', 'XYZ') then the function returns updated toList with values ('IBM', 'WSO2', 'IBM', 'XYZ'). EXAMPLE 2 list:putAll(toList, fromList, true) If toList contains values ('IBM', 'WSO2), and if fromList contains values ('IBM', 'XYZ') then the function returns updated toList with values ('IBM', 'WSO2', 'XYZ').","title":"addAll (Function)"},{"location":"api/1.0.0/#clear-function","text":"Function returns the cleared list. Syntax OBJECT list:clear( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list which needs to be cleared OBJECT No Yes Examples EXAMPLE 1 list:clear(stockDetails) Returns an empty list.","title":"clear (Function)"},{"location":"api/1.0.0/#clone-function","text":"Function returns the cloned list. Syntax OBJECT list:clone( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to which needs to be cloned. OBJECT No Yes Examples EXAMPLE 1 list:clone(stockSymbols) Function returns cloned list of stockSymbols.","title":"clone (Function)"},{"location":"api/1.0.0/#contains-function","text":"Function checks whether the list contains the specific value. Syntax BOOL list:contains( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked on whether it contains the value or not. OBJECT No Yes value The value that needs to be checked. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:contains(stockSymbols, 'IBM') Returns 'true' if the stockSymbols list contains value IBM else it returns false .","title":"contains (Function)"},{"location":"api/1.0.0/#containsall-function","text":"Function checks whether the list contains all the values in the given list. Syntax BOOL list:containsAll( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked on whether it contains all the values or not. OBJECT No Yes given.list The list which contains all the values to be checked. OBJECT No Yes Examples EXAMPLE 1 list:containsAll(stockSymbols, latestStockSymbols) Returns 'true' if the stockSymbols list contains values in latestStockSymbols else it returns false .","title":"containsAll (Function)"},{"location":"api/1.0.0/#create-function","text":"Function creates a list containing all values provided. Syntax OBJECT list:create() OBJECT list:create( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value1) OBJECT list:create( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value1, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value1 Value 1 OBJECT INT LONG FLOAT DOUBLE BOOL STRING Yes Yes Examples EXAMPLE 1 list:create(1, 2, 3, 4, 5, 6) This returns a list with values 1 , 2 , 3 , 4 , 5 and 6 . EXAMPLE 2 list:create() This returns an empty list.","title":"create (Function)"},{"location":"api/1.0.0/#get-function","text":"Function returns the value at the specific index, null if index is out of range. Syntax OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING list:get( OBJECT list, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list Attribute containing the list OBJECT No Yes index Index of the element INT No Yes Examples EXAMPLE 1 list:get(stockSymbols, 1) This returns the element in the 1st index in the stockSymbols list.","title":"get (Function)"},{"location":"api/1.0.0/#indexof-function","text":"Function returns the last index of the given element. Syntax INT list:indexOf( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to be checked to get index of an element. OBJECT No Yes value Value for which last index needs to be identified. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:indexOf(stockSymbols. `IBM`) Returns the last index of the element IBM if present else it returns -1.","title":"indexOf (Function)"},{"location":"api/1.0.0/#isempty-function","text":"Function checks if the list is empty. Syntax BOOL list:isEmpty( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked whether it's empty or not. OBJECT No Yes Examples EXAMPLE 1 list:isEmpty(stockSymbols) Returns 'true' if the stockSymbols list is empty else it returns false .","title":"isEmpty (Function)"},{"location":"api/1.0.0/#islist-function","text":"Function checks if the object is type of a list. Syntax BOOL list:isList( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The argument the need to be determined whether it's a list or not. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:isList(stockSymbols) Returns 'true' if the stockSymbols is and an instance of java.util.List else it returns false .","title":"isList (Function)"},{"location":"api/1.0.0/#lastindexof-function","text":"Function returns the index of the given value. Syntax INT list:lastIndexOf( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to be checked to get index of an element. OBJECT No Yes value Value for which last index needs to be identified. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:lastIndexOf(stockSymbols. `IBM`) Returns the last index of the element IBM if present else it returns -1.","title":"lastIndexOf (Function)"},{"location":"api/1.0.0/#remove-function","text":"Function returns the updated list after removing the element with the specified value. Syntax OBJECT list:remove( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes value The value of the element that needs to removed. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:remove(stockSymbols, 'IBM') This returns the updated list, stockSymbols after stockSymbols the value IBM .","title":"remove (Function)"},{"location":"api/1.0.0/#removeall-function","text":"Function returns the updated list after removing all the element with the specified list. Syntax OBJECT list:removeAll( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes given.list The list with all the elements that needs to removed. OBJECT No Yes Examples EXAMPLE 1 list:removeAll(stockSymbols, latestStockSymbols) This returns the updated list, stockSymbols after removing all the values in latestStockSymbols.","title":"removeAll (Function)"},{"location":"api/1.0.0/#removebyindex-function","text":"Function returns the updated list after removing the element with the specified index. Syntax OBJECT list:removeByIndex( OBJECT list, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes index The index of the element that needs to removed. INT No Yes Examples EXAMPLE 1 list:removeByIndex(stockSymbols, 0) This returns the updated list, stockSymbols after removing value at 0 th index.","title":"removeByIndex (Function)"},{"location":"api/1.0.0/#retainall-function","text":"Function returns the updated list after retaining all the elements in the specified list. Syntax OBJECT list:retainAll( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes given.list The list with all the elements that needs to reatined. OBJECT No Yes Examples EXAMPLE 1 list:retainAll(stockSymbols, latestStockSymbols) This returns the updated list, stockSymbols after retaining all the values in latestStockSymbols.","title":"retainAll (Function)"},{"location":"api/1.0.0/#setvalue-function","text":"Function returns the updated list after replacing the element in the given index by the given value. Syntax OBJECT list:setValue( OBJECT list, INT index, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to which the value should be updated. OBJECT No Yes index The index in which the value should to be updated. INT No Yes value The value to be updated with. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:set(stockSymbols, 0, 'IBM') Function returns the updated list after replacing the value at 0th index with the value IBM","title":"setValue (Function)"},{"location":"api/1.0.0/#size-function","text":"Function to return the size of the list. Syntax INT list:size( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list for which size should be returned. OBJECT No Yes Examples EXAMPLE 1 list:size(stockSymbols) Returns size of the stockSymbols list.","title":"size (Function)"},{"location":"api/1.0.0/#sort-function","text":"Function returns lists sorted in ascending or descending order. Syntax OBJECT list:sort( OBJECT list) OBJECT list:sort( OBJECT list, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list which should be sorted. OBJECT No Yes order Order in which the list needs to be sorted (ASC/DESC/REV). REV STRING Yes No Examples EXAMPLE 1 list:sort(stockSymbols) Function returns the sorted list in ascending order. EXAMPLE 2 list:sort(stockSymbols, 'DESC') Function returns the sorted list in descending order.","title":"sort (Function)"},{"location":"api/1.0.0/#tokenize-stream-processor","text":"Tokenize the list and return each key, value as new attributes in events Syntax list:tokenize( OBJECT list) list:tokenize( OBJECT list, OBJECT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list Array list which needs to be tokenized OBJECT No Yes Extra Return Attributes Name Description Possible Types index Index of an entry consisted in the list INT value Value of an entry consisted in the list OBJECT Examples EXAMPLE 1 list:tokenize(customList) If custom list contains ('WSO2', 'IBM', 'XYZ') elements, then tokenize function will return 3 events with value attributes WSO2, IBM and XYZ respectively.","title":"tokenize (Stream Processor)"},{"location":"api/1.0.1/","text":"API Docs - v1.0.1 Tested Siddhi Core version: 5.1.14 It could also support other Siddhi Core minor versions. List collect (Aggregate Function) Collects multiple values to construct a list. Syntax OBJECT list:collect( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) OBJECT list:collect( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value, BOOL is.distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value Value of the list element OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes is.distinct If true only distinct elements are collected false BOOL Yes Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(10) select list:collect(symbol) as stockSymbols insert into OutputStream; For the window expiry of 10 events, the collect() function will collect attributes of symbol to a single list and return as stockSymbols. merge (Aggregate Function) Collects multiple lists to merge as a single list. Syntax OBJECT list:merge( OBJECT list) OBJECT list:merge( OBJECT list, BOOL is.distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list List to be merged OBJECT No Yes is.distinct Whether to return list with distinct values false BOOL Yes Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(2) select list:merge(list) as stockSymbols insert into OutputStream; For the window expiry of 2 events, the merge() function will collect attributes of list and merge them to a single list, returned as stockSymbols. add (Function) Function returns the updated list after adding the given value. Syntax OBJECT list:add( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) OBJECT list:add( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to which the value should be added. OBJECT No Yes value The value to be added. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes index The index in which the value should to be added. last INT Yes Yes Examples EXAMPLE 1 list:add(stockSymbols, 'IBM') Function returns the updated list after adding the value IBM in the last index. EXAMPLE 2 list:add(stockSymbols, 'IBM', 0) Function returns the updated list after adding the value IBM in the 0th index`. addAll (Function) Function returns the updated list after adding all the values from the given list. Syntax OBJECT list:addAll( OBJECT to.list, OBJECT from.list) OBJECT list:addAll( OBJECT to.list, OBJECT from.list, BOOL is.distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.list The list into which the values need to copied. OBJECT No Yes from.list The list from which the values are copied. OBJECT No Yes is.distinct If true returns list with distinct values false BOOL Yes Yes Examples EXAMPLE 1 list:putAll(toList, fromList) If toList contains values ('IBM', 'WSO2), and if fromList contains values ('IBM', 'XYZ') then the function returns updated toList with values ('IBM', 'WSO2', 'IBM', 'XYZ'). EXAMPLE 2 list:putAll(toList, fromList, true) If toList contains values ('IBM', 'WSO2), and if fromList contains values ('IBM', 'XYZ') then the function returns updated toList with values ('IBM', 'WSO2', 'XYZ'). clear (Function) Function returns the cleared list. Syntax OBJECT list:clear( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list which needs to be cleared OBJECT No Yes Examples EXAMPLE 1 list:clear(stockDetails) Returns an empty list. clone (Function) Function returns the cloned list. Syntax OBJECT list:clone( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to which needs to be cloned. OBJECT No Yes Examples EXAMPLE 1 list:clone(stockSymbols) Function returns cloned list of stockSymbols. contains (Function) Function checks whether the list contains the specific value. Syntax BOOL list:contains( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked on whether it contains the value or not. OBJECT No Yes value The value that needs to be checked. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:contains(stockSymbols, 'IBM') Returns 'true' if the stockSymbols list contains value IBM else it returns false . containsAll (Function) Function checks whether the list contains all the values in the given list. Syntax BOOL list:containsAll( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked on whether it contains all the values or not. OBJECT No Yes given.list The list which contains all the values to be checked. OBJECT No Yes Examples EXAMPLE 1 list:containsAll(stockSymbols, latestStockSymbols) Returns 'true' if the stockSymbols list contains values in latestStockSymbols else it returns false . create (Function) Function creates a list containing all values provided. Syntax OBJECT list:create() OBJECT list:create( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value1) OBJECT list:create( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value1, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value1 Value 1 OBJECT INT LONG FLOAT DOUBLE BOOL STRING Yes Yes Examples EXAMPLE 1 list:create(1, 2, 3, 4, 5, 6) This returns a list with values 1 , 2 , 3 , 4 , 5 and 6 . EXAMPLE 2 list:create() This returns an empty list. get (Function) Function returns the value at the specific index, null if index is out of range. Syntax OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING list:get( OBJECT list, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list Attribute containing the list OBJECT No Yes index Index of the element INT No Yes Examples EXAMPLE 1 list:get(stockSymbols, 1) This returns the element in the 1st index in the stockSymbols list. indexOf (Function) Function returns the last index of the given element. Syntax INT list:indexOf( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to be checked to get index of an element. OBJECT No Yes value Value for which last index needs to be identified. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:indexOf(stockSymbols. `IBM`) Returns the last index of the element IBM if present else it returns -1. isEmpty (Function) Function checks if the list is empty. Syntax BOOL list:isEmpty( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked whether it's empty or not. OBJECT No Yes Examples EXAMPLE 1 list:isEmpty(stockSymbols) Returns 'true' if the stockSymbols list is empty else it returns false . isList (Function) Function checks if the object is type of a list. Syntax BOOL list:isList( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The argument the need to be determined whether it's a list or not. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:isList(stockSymbols) Returns 'true' if the stockSymbols is and an instance of java.util.List else it returns false . lastIndexOf (Function) Function returns the index of the given value. Syntax INT list:lastIndexOf( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to be checked to get index of an element. OBJECT No Yes value Value for which last index needs to be identified. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:lastIndexOf(stockSymbols. `IBM`) Returns the last index of the element IBM if present else it returns -1. remove (Function) Function returns the updated list after removing the element with the specified value. Syntax OBJECT list:remove( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes value The value of the element that needs to removed. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:remove(stockSymbols, 'IBM') This returns the updated list, stockSymbols after stockSymbols the value IBM . removeAll (Function) Function returns the updated list after removing all the element with the specified list. Syntax OBJECT list:removeAll( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes given.list The list with all the elements that needs to removed. OBJECT No Yes Examples EXAMPLE 1 list:removeAll(stockSymbols, latestStockSymbols) This returns the updated list, stockSymbols after removing all the values in latestStockSymbols. removeByIndex (Function) Function returns the updated list after removing the element with the specified index. Syntax OBJECT list:removeByIndex( OBJECT list, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes index The index of the element that needs to removed. INT No Yes Examples EXAMPLE 1 list:removeByIndex(stockSymbols, 0) This returns the updated list, stockSymbols after removing value at 0 th index. retainAll (Function) Function returns the updated list after retaining all the elements in the specified list. Syntax OBJECT list:retainAll( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes given.list The list with all the elements that needs to reatined. OBJECT No Yes Examples EXAMPLE 1 list:retainAll(stockSymbols, latestStockSymbols) This returns the updated list, stockSymbols after retaining all the values in latestStockSymbols. setValue (Function) Function returns the updated list after replacing the element in the given index by the given value. Syntax OBJECT list:setValue( OBJECT list, INT index, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to which the value should be updated. OBJECT No Yes index The index in which the value should to be updated. INT No Yes value The value to be updated with. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:set(stockSymbols, 0, 'IBM') Function returns the updated list after replacing the value at 0th index with the value IBM size (Function) Function to return the size of the list. Syntax INT list:size( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list for which size should be returned. OBJECT No Yes Examples EXAMPLE 1 list:size(stockSymbols) Returns size of the stockSymbols list. sort (Function) Function returns lists sorted in ascending or descending order. Syntax OBJECT list:sort( OBJECT list) OBJECT list:sort( OBJECT list, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list which should be sorted. OBJECT No Yes order Order in which the list needs to be sorted (ASC/DESC/REV). REV STRING Yes No Examples EXAMPLE 1 list:sort(stockSymbols) Function returns the sorted list in ascending order. EXAMPLE 2 list:sort(stockSymbols, 'DESC') Function returns the sorted list in descending order. tokenize (Stream Processor) Tokenize the list and return each key, value as new attributes in events Syntax list:tokenize( OBJECT list) list:tokenize( OBJECT list, OBJECT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list Array list which needs to be tokenized OBJECT No Yes Extra Return Attributes Name Description Possible Types index Index of an entry consisted in the list INT value Value of an entry consisted in the list OBJECT Examples EXAMPLE 1 list:tokenize(customList) If custom list contains ('WSO2', 'IBM', 'XYZ') elements, then tokenize function will return 3 events with value attributes WSO2, IBM and XYZ respectively.","title":"1.0.1"},{"location":"api/1.0.1/#api-docs-v101","text":"Tested Siddhi Core version: 5.1.14 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.0.1"},{"location":"api/1.0.1/#list","text":"","title":"List"},{"location":"api/1.0.1/#collect-aggregate-function","text":"Collects multiple values to construct a list. Syntax OBJECT list:collect( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) OBJECT list:collect( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value, BOOL is.distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value Value of the list element OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes is.distinct If true only distinct elements are collected false BOOL Yes Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(10) select list:collect(symbol) as stockSymbols insert into OutputStream; For the window expiry of 10 events, the collect() function will collect attributes of symbol to a single list and return as stockSymbols.","title":"collect (Aggregate Function)"},{"location":"api/1.0.1/#merge-aggregate-function","text":"Collects multiple lists to merge as a single list. Syntax OBJECT list:merge( OBJECT list) OBJECT list:merge( OBJECT list, BOOL is.distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list List to be merged OBJECT No Yes is.distinct Whether to return list with distinct values false BOOL Yes Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(2) select list:merge(list) as stockSymbols insert into OutputStream; For the window expiry of 2 events, the merge() function will collect attributes of list and merge them to a single list, returned as stockSymbols.","title":"merge (Aggregate Function)"},{"location":"api/1.0.1/#add-function","text":"Function returns the updated list after adding the given value. Syntax OBJECT list:add( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) OBJECT list:add( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to which the value should be added. OBJECT No Yes value The value to be added. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes index The index in which the value should to be added. last INT Yes Yes Examples EXAMPLE 1 list:add(stockSymbols, 'IBM') Function returns the updated list after adding the value IBM in the last index. EXAMPLE 2 list:add(stockSymbols, 'IBM', 0) Function returns the updated list after adding the value IBM in the 0th index`.","title":"add (Function)"},{"location":"api/1.0.1/#addall-function","text":"Function returns the updated list after adding all the values from the given list. Syntax OBJECT list:addAll( OBJECT to.list, OBJECT from.list) OBJECT list:addAll( OBJECT to.list, OBJECT from.list, BOOL is.distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.list The list into which the values need to copied. OBJECT No Yes from.list The list from which the values are copied. OBJECT No Yes is.distinct If true returns list with distinct values false BOOL Yes Yes Examples EXAMPLE 1 list:putAll(toList, fromList) If toList contains values ('IBM', 'WSO2), and if fromList contains values ('IBM', 'XYZ') then the function returns updated toList with values ('IBM', 'WSO2', 'IBM', 'XYZ'). EXAMPLE 2 list:putAll(toList, fromList, true) If toList contains values ('IBM', 'WSO2), and if fromList contains values ('IBM', 'XYZ') then the function returns updated toList with values ('IBM', 'WSO2', 'XYZ').","title":"addAll (Function)"},{"location":"api/1.0.1/#clear-function","text":"Function returns the cleared list. Syntax OBJECT list:clear( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list which needs to be cleared OBJECT No Yes Examples EXAMPLE 1 list:clear(stockDetails) Returns an empty list.","title":"clear (Function)"},{"location":"api/1.0.1/#clone-function","text":"Function returns the cloned list. Syntax OBJECT list:clone( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to which needs to be cloned. OBJECT No Yes Examples EXAMPLE 1 list:clone(stockSymbols) Function returns cloned list of stockSymbols.","title":"clone (Function)"},{"location":"api/1.0.1/#contains-function","text":"Function checks whether the list contains the specific value. Syntax BOOL list:contains( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked on whether it contains the value or not. OBJECT No Yes value The value that needs to be checked. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:contains(stockSymbols, 'IBM') Returns 'true' if the stockSymbols list contains value IBM else it returns false .","title":"contains (Function)"},{"location":"api/1.0.1/#containsall-function","text":"Function checks whether the list contains all the values in the given list. Syntax BOOL list:containsAll( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked on whether it contains all the values or not. OBJECT No Yes given.list The list which contains all the values to be checked. OBJECT No Yes Examples EXAMPLE 1 list:containsAll(stockSymbols, latestStockSymbols) Returns 'true' if the stockSymbols list contains values in latestStockSymbols else it returns false .","title":"containsAll (Function)"},{"location":"api/1.0.1/#create-function","text":"Function creates a list containing all values provided. Syntax OBJECT list:create() OBJECT list:create( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value1) OBJECT list:create( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value1, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value1 Value 1 OBJECT INT LONG FLOAT DOUBLE BOOL STRING Yes Yes Examples EXAMPLE 1 list:create(1, 2, 3, 4, 5, 6) This returns a list with values 1 , 2 , 3 , 4 , 5 and 6 . EXAMPLE 2 list:create() This returns an empty list.","title":"create (Function)"},{"location":"api/1.0.1/#get-function","text":"Function returns the value at the specific index, null if index is out of range. Syntax OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING list:get( OBJECT list, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list Attribute containing the list OBJECT No Yes index Index of the element INT No Yes Examples EXAMPLE 1 list:get(stockSymbols, 1) This returns the element in the 1st index in the stockSymbols list.","title":"get (Function)"},{"location":"api/1.0.1/#indexof-function","text":"Function returns the last index of the given element. Syntax INT list:indexOf( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to be checked to get index of an element. OBJECT No Yes value Value for which last index needs to be identified. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:indexOf(stockSymbols. `IBM`) Returns the last index of the element IBM if present else it returns -1.","title":"indexOf (Function)"},{"location":"api/1.0.1/#isempty-function","text":"Function checks if the list is empty. Syntax BOOL list:isEmpty( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked whether it's empty or not. OBJECT No Yes Examples EXAMPLE 1 list:isEmpty(stockSymbols) Returns 'true' if the stockSymbols list is empty else it returns false .","title":"isEmpty (Function)"},{"location":"api/1.0.1/#islist-function","text":"Function checks if the object is type of a list. Syntax BOOL list:isList( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The argument the need to be determined whether it's a list or not. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:isList(stockSymbols) Returns 'true' if the stockSymbols is and an instance of java.util.List else it returns false .","title":"isList (Function)"},{"location":"api/1.0.1/#lastindexof-function","text":"Function returns the index of the given value. Syntax INT list:lastIndexOf( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to be checked to get index of an element. OBJECT No Yes value Value for which last index needs to be identified. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:lastIndexOf(stockSymbols. `IBM`) Returns the last index of the element IBM if present else it returns -1.","title":"lastIndexOf (Function)"},{"location":"api/1.0.1/#remove-function","text":"Function returns the updated list after removing the element with the specified value. Syntax OBJECT list:remove( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes value The value of the element that needs to removed. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:remove(stockSymbols, 'IBM') This returns the updated list, stockSymbols after stockSymbols the value IBM .","title":"remove (Function)"},{"location":"api/1.0.1/#removeall-function","text":"Function returns the updated list after removing all the element with the specified list. Syntax OBJECT list:removeAll( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes given.list The list with all the elements that needs to removed. OBJECT No Yes Examples EXAMPLE 1 list:removeAll(stockSymbols, latestStockSymbols) This returns the updated list, stockSymbols after removing all the values in latestStockSymbols.","title":"removeAll (Function)"},{"location":"api/1.0.1/#removebyindex-function","text":"Function returns the updated list after removing the element with the specified index. Syntax OBJECT list:removeByIndex( OBJECT list, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes index The index of the element that needs to removed. INT No Yes Examples EXAMPLE 1 list:removeByIndex(stockSymbols, 0) This returns the updated list, stockSymbols after removing value at 0 th index.","title":"removeByIndex (Function)"},{"location":"api/1.0.1/#retainall-function","text":"Function returns the updated list after retaining all the elements in the specified list. Syntax OBJECT list:retainAll( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes given.list The list with all the elements that needs to reatined. OBJECT No Yes Examples EXAMPLE 1 list:retainAll(stockSymbols, latestStockSymbols) This returns the updated list, stockSymbols after retaining all the values in latestStockSymbols.","title":"retainAll (Function)"},{"location":"api/1.0.1/#setvalue-function","text":"Function returns the updated list after replacing the element in the given index by the given value. Syntax OBJECT list:setValue( OBJECT list, INT index, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to which the value should be updated. OBJECT No Yes index The index in which the value should to be updated. INT No Yes value The value to be updated with. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:set(stockSymbols, 0, 'IBM') Function returns the updated list after replacing the value at 0th index with the value IBM","title":"setValue (Function)"},{"location":"api/1.0.1/#size-function","text":"Function to return the size of the list. Syntax INT list:size( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list for which size should be returned. OBJECT No Yes Examples EXAMPLE 1 list:size(stockSymbols) Returns size of the stockSymbols list.","title":"size (Function)"},{"location":"api/1.0.1/#sort-function","text":"Function returns lists sorted in ascending or descending order. Syntax OBJECT list:sort( OBJECT list) OBJECT list:sort( OBJECT list, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list which should be sorted. OBJECT No Yes order Order in which the list needs to be sorted (ASC/DESC/REV). REV STRING Yes No Examples EXAMPLE 1 list:sort(stockSymbols) Function returns the sorted list in ascending order. EXAMPLE 2 list:sort(stockSymbols, 'DESC') Function returns the sorted list in descending order.","title":"sort (Function)"},{"location":"api/1.0.1/#tokenize-stream-processor","text":"Tokenize the list and return each key, value as new attributes in events Syntax list:tokenize( OBJECT list) list:tokenize( OBJECT list, OBJECT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list Array list which needs to be tokenized OBJECT No Yes Extra Return Attributes Name Description Possible Types index Index of an entry consisted in the list INT value Value of an entry consisted in the list OBJECT Examples EXAMPLE 1 list:tokenize(customList) If custom list contains ('WSO2', 'IBM', 'XYZ') elements, then tokenize function will return 3 events with value attributes WSO2, IBM and XYZ respectively.","title":"tokenize (Stream Processor)"},{"location":"api/1.0.2/","text":"API Docs - v1.0.2 Tested Siddhi Core version: 5.1.31 It could also support other Siddhi Core minor versions. List collect (Aggregate Function) Collects multiple values to construct a list. Syntax OBJECT list:collect( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) OBJECT list:collect( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value, BOOL is.distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value Value of the list element OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes is.distinct If true only distinct elements are collected false BOOL Yes Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(10) select list:collect(symbol) as stockSymbols insert into OutputStream; For the window expiry of 10 events, the collect() function will collect attributes of symbol to a single list and return as stockSymbols. merge (Aggregate Function) Collects multiple lists to merge as a single list. Syntax OBJECT list:merge( OBJECT list) OBJECT list:merge( OBJECT list, BOOL is.distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list List to be merged OBJECT No Yes is.distinct Whether to return list with distinct values false BOOL Yes Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(2) select list:merge(list) as stockSymbols insert into OutputStream; For the window expiry of 2 events, the merge() function will collect attributes of list and merge them to a single list, returned as stockSymbols. add (Function) Function returns the updated list after adding the given value. Syntax OBJECT list:add( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) OBJECT list:add( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to which the value should be added. OBJECT No Yes value The value to be added. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes index The index in which the value should to be added. last INT Yes Yes Examples EXAMPLE 1 list:add(stockSymbols, 'IBM') Function returns the updated list after adding the value IBM in the last index. EXAMPLE 2 list:add(stockSymbols, 'IBM', 0) Function returns the updated list after adding the value IBM in the 0th index`. addAll (Function) Function returns the updated list after adding all the values from the given list. Syntax OBJECT list:addAll( OBJECT to.list, OBJECT from.list) OBJECT list:addAll( OBJECT to.list, OBJECT from.list, BOOL is.distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.list The list into which the values need to copied. OBJECT No Yes from.list The list from which the values are copied. OBJECT No Yes is.distinct If true returns list with distinct values false BOOL Yes Yes Examples EXAMPLE 1 list:putAll(toList, fromList) If toList contains values ('IBM', 'WSO2), and if fromList contains values ('IBM', 'XYZ') then the function returns updated toList with values ('IBM', 'WSO2', 'IBM', 'XYZ'). EXAMPLE 2 list:putAll(toList, fromList, true) If toList contains values ('IBM', 'WSO2), and if fromList contains values ('IBM', 'XYZ') then the function returns updated toList with values ('IBM', 'WSO2', 'XYZ'). clear (Function) Function returns the cleared list. Syntax OBJECT list:clear( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list which needs to be cleared OBJECT No Yes Examples EXAMPLE 1 list:clear(stockDetails) Returns an empty list. clone (Function) Function returns the cloned list. Syntax OBJECT list:clone( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to which needs to be cloned. OBJECT No Yes Examples EXAMPLE 1 list:clone(stockSymbols) Function returns cloned list of stockSymbols. contains (Function) Function checks whether the list contains the specific value. Syntax BOOL list:contains( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked on whether it contains the value or not. OBJECT No Yes value The value that needs to be checked. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:contains(stockSymbols, 'IBM') Returns 'true' if the stockSymbols list contains value IBM else it returns false . containsAll (Function) Function checks whether the list contains all the values in the given list. Syntax BOOL list:containsAll( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked on whether it contains all the values or not. OBJECT No Yes given.list The list which contains all the values to be checked. OBJECT No Yes Examples EXAMPLE 1 list:containsAll(stockSymbols, latestStockSymbols) Returns 'true' if the stockSymbols list contains values in latestStockSymbols else it returns false . containsAny (Function) Function checks whether the two specified lists have any common elements. Syntax BOOL list:containsAny( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked on whether it contains any of the values or not. OBJECT No Yes given.list The list which contains any of the values to be checked. OBJECT No Yes Examples EXAMPLE 1 list:containsAny(stockSymbols, latestStockSymbols) Returns 'true' if the stockSymbols list contains any value in latestStockSymbols else it returns false . create (Function) Function creates a list containing all values provided. Syntax OBJECT list:create() OBJECT list:create( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value1) OBJECT list:create( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value1, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value1 Value 1 OBJECT INT LONG FLOAT DOUBLE BOOL STRING Yes Yes Examples EXAMPLE 1 list:create(1, 2, 3, 4, 5, 6) This returns a list with values 1 , 2 , 3 , 4 , 5 and 6 . EXAMPLE 2 list:create() This returns an empty list. get (Function) Function returns the value at the specific index, null if index is out of range. Syntax OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING list:get( OBJECT list, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list Attribute containing the list OBJECT No Yes index Index of the element INT No Yes Examples EXAMPLE 1 list:get(stockSymbols, 1) This returns the element in the 1st index in the stockSymbols list. indexOf (Function) Function returns the last index of the given element. Syntax INT list:indexOf( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to be checked to get index of an element. OBJECT No Yes value Value for which last index needs to be identified. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:indexOf(stockSymbols. `IBM`) Returns the last index of the element IBM if present else it returns -1. isEmpty (Function) Function checks if the list is empty. Syntax BOOL list:isEmpty( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked whether it's empty or not. OBJECT No Yes Examples EXAMPLE 1 list:isEmpty(stockSymbols) Returns 'true' if the stockSymbols list is empty else it returns false . isList (Function) Function checks if the object is type of a list. Syntax BOOL list:isList( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The argument the need to be determined whether it's a list or not. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:isList(stockSymbols) Returns 'true' if the stockSymbols is and an instance of java.util.List else it returns false . lastIndexOf (Function) Function returns the index of the given value. Syntax INT list:lastIndexOf( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to be checked to get index of an element. OBJECT No Yes value Value for which last index needs to be identified. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:lastIndexOf(stockSymbols. `IBM`) Returns the last index of the element IBM if present else it returns -1. remove (Function) Function returns the updated list after removing the element with the specified value. Syntax OBJECT list:remove( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes value The value of the element that needs to removed. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:remove(stockSymbols, 'IBM') This returns the updated list, stockSymbols after stockSymbols the value IBM . removeAll (Function) Function returns the updated list after removing all the element with the specified list. Syntax OBJECT list:removeAll( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes given.list The list with all the elements that needs to removed. OBJECT No Yes Examples EXAMPLE 1 list:removeAll(stockSymbols, latestStockSymbols) This returns the updated list, stockSymbols after removing all the values in latestStockSymbols. removeByIndex (Function) Function returns the updated list after removing the element with the specified index. Syntax OBJECT list:removeByIndex( OBJECT list, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes index The index of the element that needs to removed. INT No Yes Examples EXAMPLE 1 list:removeByIndex(stockSymbols, 0) This returns the updated list, stockSymbols after removing value at 0 th index. retainAll (Function) Function returns the updated list after retaining all the elements in the specified list. Syntax OBJECT list:retainAll( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes given.list The list with all the elements that needs to reatined. OBJECT No Yes Examples EXAMPLE 1 list:retainAll(stockSymbols, latestStockSymbols) This returns the updated list, stockSymbols after retaining all the values in latestStockSymbols. setValue (Function) Function returns the updated list after replacing the element in the given index by the given value. Syntax OBJECT list:setValue( OBJECT list, INT index, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to which the value should be updated. OBJECT No Yes index The index in which the value should to be updated. INT No Yes value The value to be updated with. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:set(stockSymbols, 0, 'IBM') Function returns the updated list after replacing the value at 0th index with the value IBM size (Function) Function to return the size of the list. Syntax INT list:size( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list for which size should be returned. OBJECT No Yes Examples EXAMPLE 1 list:size(stockSymbols) Returns size of the stockSymbols list. sort (Function) Function returns lists sorted in ascending or descending order. Syntax OBJECT list:sort( OBJECT list) OBJECT list:sort( OBJECT list, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list which should be sorted. OBJECT No Yes order Order in which the list needs to be sorted (ASC/DESC/REV). REV STRING Yes No Examples EXAMPLE 1 list:sort(stockSymbols) Function returns the sorted list in ascending order. EXAMPLE 2 list:sort(stockSymbols, 'DESC') Function returns the sorted list in descending order. tokenize (Stream Processor) Tokenize the list and return each key, value as new attributes in events Syntax list:tokenize( OBJECT list) list:tokenize( OBJECT list, OBJECT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list Array list which needs to be tokenized OBJECT No Yes Extra Return Attributes Name Description Possible Types index Index of an entry consisted in the list INT value Value of an entry consisted in the list OBJECT Examples EXAMPLE 1 list:tokenize(customList) If custom list contains ('WSO2', 'IBM', 'XYZ') elements, then tokenize function will return 3 events with value attributes WSO2, IBM and XYZ respectively.","title":"1.0.2"},{"location":"api/1.0.2/#api-docs-v102","text":"Tested Siddhi Core version: 5.1.31 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.0.2"},{"location":"api/1.0.2/#list","text":"","title":"List"},{"location":"api/1.0.2/#collect-aggregate-function","text":"Collects multiple values to construct a list. Syntax OBJECT list:collect( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) OBJECT list:collect( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value, BOOL is.distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value Value of the list element OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes is.distinct If true only distinct elements are collected false BOOL Yes Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(10) select list:collect(symbol) as stockSymbols insert into OutputStream; For the window expiry of 10 events, the collect() function will collect attributes of symbol to a single list and return as stockSymbols.","title":"collect (Aggregate Function)"},{"location":"api/1.0.2/#merge-aggregate-function","text":"Collects multiple lists to merge as a single list. Syntax OBJECT list:merge( OBJECT list) OBJECT list:merge( OBJECT list, BOOL is.distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list List to be merged OBJECT No Yes is.distinct Whether to return list with distinct values false BOOL Yes Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(2) select list:merge(list) as stockSymbols insert into OutputStream; For the window expiry of 2 events, the merge() function will collect attributes of list and merge them to a single list, returned as stockSymbols.","title":"merge (Aggregate Function)"},{"location":"api/1.0.2/#add-function","text":"Function returns the updated list after adding the given value. Syntax OBJECT list:add( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) OBJECT list:add( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to which the value should be added. OBJECT No Yes value The value to be added. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes index The index in which the value should to be added. last INT Yes Yes Examples EXAMPLE 1 list:add(stockSymbols, 'IBM') Function returns the updated list after adding the value IBM in the last index. EXAMPLE 2 list:add(stockSymbols, 'IBM', 0) Function returns the updated list after adding the value IBM in the 0th index`.","title":"add (Function)"},{"location":"api/1.0.2/#addall-function","text":"Function returns the updated list after adding all the values from the given list. Syntax OBJECT list:addAll( OBJECT to.list, OBJECT from.list) OBJECT list:addAll( OBJECT to.list, OBJECT from.list, BOOL is.distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.list The list into which the values need to copied. OBJECT No Yes from.list The list from which the values are copied. OBJECT No Yes is.distinct If true returns list with distinct values false BOOL Yes Yes Examples EXAMPLE 1 list:putAll(toList, fromList) If toList contains values ('IBM', 'WSO2), and if fromList contains values ('IBM', 'XYZ') then the function returns updated toList with values ('IBM', 'WSO2', 'IBM', 'XYZ'). EXAMPLE 2 list:putAll(toList, fromList, true) If toList contains values ('IBM', 'WSO2), and if fromList contains values ('IBM', 'XYZ') then the function returns updated toList with values ('IBM', 'WSO2', 'XYZ').","title":"addAll (Function)"},{"location":"api/1.0.2/#clear-function","text":"Function returns the cleared list. Syntax OBJECT list:clear( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list which needs to be cleared OBJECT No Yes Examples EXAMPLE 1 list:clear(stockDetails) Returns an empty list.","title":"clear (Function)"},{"location":"api/1.0.2/#clone-function","text":"Function returns the cloned list. Syntax OBJECT list:clone( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to which needs to be cloned. OBJECT No Yes Examples EXAMPLE 1 list:clone(stockSymbols) Function returns cloned list of stockSymbols.","title":"clone (Function)"},{"location":"api/1.0.2/#contains-function","text":"Function checks whether the list contains the specific value. Syntax BOOL list:contains( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked on whether it contains the value or not. OBJECT No Yes value The value that needs to be checked. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:contains(stockSymbols, 'IBM') Returns 'true' if the stockSymbols list contains value IBM else it returns false .","title":"contains (Function)"},{"location":"api/1.0.2/#containsall-function","text":"Function checks whether the list contains all the values in the given list. Syntax BOOL list:containsAll( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked on whether it contains all the values or not. OBJECT No Yes given.list The list which contains all the values to be checked. OBJECT No Yes Examples EXAMPLE 1 list:containsAll(stockSymbols, latestStockSymbols) Returns 'true' if the stockSymbols list contains values in latestStockSymbols else it returns false .","title":"containsAll (Function)"},{"location":"api/1.0.2/#containsany-function","text":"Function checks whether the two specified lists have any common elements. Syntax BOOL list:containsAny( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked on whether it contains any of the values or not. OBJECT No Yes given.list The list which contains any of the values to be checked. OBJECT No Yes Examples EXAMPLE 1 list:containsAny(stockSymbols, latestStockSymbols) Returns 'true' if the stockSymbols list contains any value in latestStockSymbols else it returns false .","title":"containsAny (Function)"},{"location":"api/1.0.2/#create-function","text":"Function creates a list containing all values provided. Syntax OBJECT list:create() OBJECT list:create( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value1) OBJECT list:create( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value1, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value1 Value 1 OBJECT INT LONG FLOAT DOUBLE BOOL STRING Yes Yes Examples EXAMPLE 1 list:create(1, 2, 3, 4, 5, 6) This returns a list with values 1 , 2 , 3 , 4 , 5 and 6 . EXAMPLE 2 list:create() This returns an empty list.","title":"create (Function)"},{"location":"api/1.0.2/#get-function","text":"Function returns the value at the specific index, null if index is out of range. Syntax OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING list:get( OBJECT list, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list Attribute containing the list OBJECT No Yes index Index of the element INT No Yes Examples EXAMPLE 1 list:get(stockSymbols, 1) This returns the element in the 1st index in the stockSymbols list.","title":"get (Function)"},{"location":"api/1.0.2/#indexof-function","text":"Function returns the last index of the given element. Syntax INT list:indexOf( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to be checked to get index of an element. OBJECT No Yes value Value for which last index needs to be identified. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:indexOf(stockSymbols. `IBM`) Returns the last index of the element IBM if present else it returns -1.","title":"indexOf (Function)"},{"location":"api/1.0.2/#isempty-function","text":"Function checks if the list is empty. Syntax BOOL list:isEmpty( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked whether it's empty or not. OBJECT No Yes Examples EXAMPLE 1 list:isEmpty(stockSymbols) Returns 'true' if the stockSymbols list is empty else it returns false .","title":"isEmpty (Function)"},{"location":"api/1.0.2/#islist-function","text":"Function checks if the object is type of a list. Syntax BOOL list:isList( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The argument the need to be determined whether it's a list or not. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:isList(stockSymbols) Returns 'true' if the stockSymbols is and an instance of java.util.List else it returns false .","title":"isList (Function)"},{"location":"api/1.0.2/#lastindexof-function","text":"Function returns the index of the given value. Syntax INT list:lastIndexOf( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to be checked to get index of an element. OBJECT No Yes value Value for which last index needs to be identified. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:lastIndexOf(stockSymbols. `IBM`) Returns the last index of the element IBM if present else it returns -1.","title":"lastIndexOf (Function)"},{"location":"api/1.0.2/#remove-function","text":"Function returns the updated list after removing the element with the specified value. Syntax OBJECT list:remove( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes value The value of the element that needs to removed. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:remove(stockSymbols, 'IBM') This returns the updated list, stockSymbols after stockSymbols the value IBM .","title":"remove (Function)"},{"location":"api/1.0.2/#removeall-function","text":"Function returns the updated list after removing all the element with the specified list. Syntax OBJECT list:removeAll( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes given.list The list with all the elements that needs to removed. OBJECT No Yes Examples EXAMPLE 1 list:removeAll(stockSymbols, latestStockSymbols) This returns the updated list, stockSymbols after removing all the values in latestStockSymbols.","title":"removeAll (Function)"},{"location":"api/1.0.2/#removebyindex-function","text":"Function returns the updated list after removing the element with the specified index. Syntax OBJECT list:removeByIndex( OBJECT list, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes index The index of the element that needs to removed. INT No Yes Examples EXAMPLE 1 list:removeByIndex(stockSymbols, 0) This returns the updated list, stockSymbols after removing value at 0 th index.","title":"removeByIndex (Function)"},{"location":"api/1.0.2/#retainall-function","text":"Function returns the updated list after retaining all the elements in the specified list. Syntax OBJECT list:retainAll( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes given.list The list with all the elements that needs to reatined. OBJECT No Yes Examples EXAMPLE 1 list:retainAll(stockSymbols, latestStockSymbols) This returns the updated list, stockSymbols after retaining all the values in latestStockSymbols.","title":"retainAll (Function)"},{"location":"api/1.0.2/#setvalue-function","text":"Function returns the updated list after replacing the element in the given index by the given value. Syntax OBJECT list:setValue( OBJECT list, INT index, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to which the value should be updated. OBJECT No Yes index The index in which the value should to be updated. INT No Yes value The value to be updated with. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:set(stockSymbols, 0, 'IBM') Function returns the updated list after replacing the value at 0th index with the value IBM","title":"setValue (Function)"},{"location":"api/1.0.2/#size-function","text":"Function to return the size of the list. Syntax INT list:size( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list for which size should be returned. OBJECT No Yes Examples EXAMPLE 1 list:size(stockSymbols) Returns size of the stockSymbols list.","title":"size (Function)"},{"location":"api/1.0.2/#sort-function","text":"Function returns lists sorted in ascending or descending order. Syntax OBJECT list:sort( OBJECT list) OBJECT list:sort( OBJECT list, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list which should be sorted. OBJECT No Yes order Order in which the list needs to be sorted (ASC/DESC/REV). REV STRING Yes No Examples EXAMPLE 1 list:sort(stockSymbols) Function returns the sorted list in ascending order. EXAMPLE 2 list:sort(stockSymbols, 'DESC') Function returns the sorted list in descending order.","title":"sort (Function)"},{"location":"api/1.0.2/#tokenize-stream-processor","text":"Tokenize the list and return each key, value as new attributes in events Syntax list:tokenize( OBJECT list) list:tokenize( OBJECT list, OBJECT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list Array list which needs to be tokenized OBJECT No Yes Extra Return Attributes Name Description Possible Types index Index of an entry consisted in the list INT value Value of an entry consisted in the list OBJECT Examples EXAMPLE 1 list:tokenize(customList) If custom list contains ('WSO2', 'IBM', 'XYZ') elements, then tokenize function will return 3 events with value attributes WSO2, IBM and XYZ respectively.","title":"tokenize (Stream Processor)"},{"location":"api/latest/","text":"API Docs - v1.0.2 Tested Siddhi Core version: 5.1.31 It could also support other Siddhi Core minor versions. List collect (Aggregate Function) Collects multiple values to construct a list. Syntax OBJECT list:collect( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) OBJECT list:collect( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value, BOOL is.distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value Value of the list element OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes is.distinct If true only distinct elements are collected false BOOL Yes Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(10) select list:collect(symbol) as stockSymbols insert into OutputStream; For the window expiry of 10 events, the collect() function will collect attributes of symbol to a single list and return as stockSymbols. merge (Aggregate Function) Collects multiple lists to merge as a single list. Syntax OBJECT list:merge( OBJECT list) OBJECT list:merge( OBJECT list, BOOL is.distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list List to be merged OBJECT No Yes is.distinct Whether to return list with distinct values false BOOL Yes Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(2) select list:merge(list) as stockSymbols insert into OutputStream; For the window expiry of 2 events, the merge() function will collect attributes of list and merge them to a single list, returned as stockSymbols. add (Function) Function returns the updated list after adding the given value. Syntax OBJECT list:add( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) OBJECT list:add( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to which the value should be added. OBJECT No Yes value The value to be added. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes index The index in which the value should to be added. last INT Yes Yes Examples EXAMPLE 1 list:add(stockSymbols, 'IBM') Function returns the updated list after adding the value IBM in the last index. EXAMPLE 2 list:add(stockSymbols, 'IBM', 0) Function returns the updated list after adding the value IBM in the 0th index`. addAll (Function) Function returns the updated list after adding all the values from the given list. Syntax OBJECT list:addAll( OBJECT to.list, OBJECT from.list) OBJECT list:addAll( OBJECT to.list, OBJECT from.list, BOOL is.distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.list The list into which the values need to copied. OBJECT No Yes from.list The list from which the values are copied. OBJECT No Yes is.distinct If true returns list with distinct values false BOOL Yes Yes Examples EXAMPLE 1 list:putAll(toList, fromList) If toList contains values ('IBM', 'WSO2), and if fromList contains values ('IBM', 'XYZ') then the function returns updated toList with values ('IBM', 'WSO2', 'IBM', 'XYZ'). EXAMPLE 2 list:putAll(toList, fromList, true) If toList contains values ('IBM', 'WSO2), and if fromList contains values ('IBM', 'XYZ') then the function returns updated toList with values ('IBM', 'WSO2', 'XYZ'). clear (Function) Function returns the cleared list. Syntax OBJECT list:clear( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list which needs to be cleared OBJECT No Yes Examples EXAMPLE 1 list:clear(stockDetails) Returns an empty list. clone (Function) Function returns the cloned list. Syntax OBJECT list:clone( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to which needs to be cloned. OBJECT No Yes Examples EXAMPLE 1 list:clone(stockSymbols) Function returns cloned list of stockSymbols. contains (Function) Function checks whether the list contains the specific value. Syntax BOOL list:contains( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked on whether it contains the value or not. OBJECT No Yes value The value that needs to be checked. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:contains(stockSymbols, 'IBM') Returns 'true' if the stockSymbols list contains value IBM else it returns false . containsAll (Function) Function checks whether the list contains all the values in the given list. Syntax BOOL list:containsAll( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked on whether it contains all the values or not. OBJECT No Yes given.list The list which contains all the values to be checked. OBJECT No Yes Examples EXAMPLE 1 list:containsAll(stockSymbols, latestStockSymbols) Returns 'true' if the stockSymbols list contains values in latestStockSymbols else it returns false . containsAny (Function) Function checks whether the two specified lists have any common elements. Syntax BOOL list:containsAny( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked on whether it contains any of the values or not. OBJECT No Yes given.list The list which contains any of the values to be checked. OBJECT No Yes Examples EXAMPLE 1 list:containsAny(stockSymbols, latestStockSymbols) Returns 'true' if the stockSymbols list contains any value in latestStockSymbols else it returns false . create (Function) Function creates a list containing all values provided. Syntax OBJECT list:create() OBJECT list:create( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value1) OBJECT list:create( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value1, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value1 Value 1 OBJECT INT LONG FLOAT DOUBLE BOOL STRING Yes Yes Examples EXAMPLE 1 list:create(1, 2, 3, 4, 5, 6) This returns a list with values 1 , 2 , 3 , 4 , 5 and 6 . EXAMPLE 2 list:create() This returns an empty list. get (Function) Function returns the value at the specific index, null if index is out of range. Syntax OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING list:get( OBJECT list, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list Attribute containing the list OBJECT No Yes index Index of the element INT No Yes Examples EXAMPLE 1 list:get(stockSymbols, 1) This returns the element in the 1st index in the stockSymbols list. indexOf (Function) Function returns the last index of the given element. Syntax INT list:indexOf( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to be checked to get index of an element. OBJECT No Yes value Value for which last index needs to be identified. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:indexOf(stockSymbols. `IBM`) Returns the last index of the element IBM if present else it returns -1. isEmpty (Function) Function checks if the list is empty. Syntax BOOL list:isEmpty( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked whether it's empty or not. OBJECT No Yes Examples EXAMPLE 1 list:isEmpty(stockSymbols) Returns 'true' if the stockSymbols list is empty else it returns false . isList (Function) Function checks if the object is type of a list. Syntax BOOL list:isList( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The argument the need to be determined whether it's a list or not. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:isList(stockSymbols) Returns 'true' if the stockSymbols is and an instance of java.util.List else it returns false . lastIndexOf (Function) Function returns the index of the given value. Syntax INT list:lastIndexOf( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to be checked to get index of an element. OBJECT No Yes value Value for which last index needs to be identified. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:lastIndexOf(stockSymbols. `IBM`) Returns the last index of the element IBM if present else it returns -1. remove (Function) Function returns the updated list after removing the element with the specified value. Syntax OBJECT list:remove( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes value The value of the element that needs to removed. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:remove(stockSymbols, 'IBM') This returns the updated list, stockSymbols after stockSymbols the value IBM . removeAll (Function) Function returns the updated list after removing all the element with the specified list. Syntax OBJECT list:removeAll( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes given.list The list with all the elements that needs to removed. OBJECT No Yes Examples EXAMPLE 1 list:removeAll(stockSymbols, latestStockSymbols) This returns the updated list, stockSymbols after removing all the values in latestStockSymbols. removeByIndex (Function) Function returns the updated list after removing the element with the specified index. Syntax OBJECT list:removeByIndex( OBJECT list, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes index The index of the element that needs to removed. INT No Yes Examples EXAMPLE 1 list:removeByIndex(stockSymbols, 0) This returns the updated list, stockSymbols after removing value at 0 th index. retainAll (Function) Function returns the updated list after retaining all the elements in the specified list. Syntax OBJECT list:retainAll( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes given.list The list with all the elements that needs to reatined. OBJECT No Yes Examples EXAMPLE 1 list:retainAll(stockSymbols, latestStockSymbols) This returns the updated list, stockSymbols after retaining all the values in latestStockSymbols. setValue (Function) Function returns the updated list after replacing the element in the given index by the given value. Syntax OBJECT list:setValue( OBJECT list, INT index, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to which the value should be updated. OBJECT No Yes index The index in which the value should to be updated. INT No Yes value The value to be updated with. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:set(stockSymbols, 0, 'IBM') Function returns the updated list after replacing the value at 0th index with the value IBM size (Function) Function to return the size of the list. Syntax INT list:size( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list for which size should be returned. OBJECT No Yes Examples EXAMPLE 1 list:size(stockSymbols) Returns size of the stockSymbols list. sort (Function) Function returns lists sorted in ascending or descending order. Syntax OBJECT list:sort( OBJECT list) OBJECT list:sort( OBJECT list, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list which should be sorted. OBJECT No Yes order Order in which the list needs to be sorted (ASC/DESC/REV). REV STRING Yes No Examples EXAMPLE 1 list:sort(stockSymbols) Function returns the sorted list in ascending order. EXAMPLE 2 list:sort(stockSymbols, 'DESC') Function returns the sorted list in descending order. tokenize (Stream Processor) Tokenize the list and return each key, value as new attributes in events Syntax list:tokenize( OBJECT list) list:tokenize( OBJECT list, OBJECT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list Array list which needs to be tokenized OBJECT No Yes Extra Return Attributes Name Description Possible Types index Index of an entry consisted in the list INT value Value of an entry consisted in the list OBJECT Examples EXAMPLE 1 list:tokenize(customList) If custom list contains ('WSO2', 'IBM', 'XYZ') elements, then tokenize function will return 3 events with value attributes WSO2, IBM and XYZ respectively.","title":"latest"},{"location":"api/latest/#api-docs-v102","text":"Tested Siddhi Core version: 5.1.31 It could also support other Siddhi Core minor versions.","title":"API Docs - v1.0.2"},{"location":"api/latest/#list","text":"","title":"List"},{"location":"api/latest/#collect-aggregate-function","text":"Collects multiple values to construct a list. Syntax OBJECT list:collect( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) OBJECT list:collect( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value, BOOL is.distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value Value of the list element OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes is.distinct If true only distinct elements are collected false BOOL Yes Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(10) select list:collect(symbol) as stockSymbols insert into OutputStream; For the window expiry of 10 events, the collect() function will collect attributes of symbol to a single list and return as stockSymbols.","title":"collect (Aggregate Function)"},{"location":"api/latest/#merge-aggregate-function","text":"Collects multiple lists to merge as a single list. Syntax OBJECT list:merge( OBJECT list) OBJECT list:merge( OBJECT list, BOOL is.distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list List to be merged OBJECT No Yes is.distinct Whether to return list with distinct values false BOOL Yes Yes Examples EXAMPLE 1 from StockStream#window.lengthBatch(2) select list:merge(list) as stockSymbols insert into OutputStream; For the window expiry of 2 events, the merge() function will collect attributes of list and merge them to a single list, returned as stockSymbols.","title":"merge (Aggregate Function)"},{"location":"api/latest/#add-function","text":"Function returns the updated list after adding the given value. Syntax OBJECT list:add( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) OBJECT list:add( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to which the value should be added. OBJECT No Yes value The value to be added. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes index The index in which the value should to be added. last INT Yes Yes Examples EXAMPLE 1 list:add(stockSymbols, 'IBM') Function returns the updated list after adding the value IBM in the last index. EXAMPLE 2 list:add(stockSymbols, 'IBM', 0) Function returns the updated list after adding the value IBM in the 0th index`.","title":"add (Function)"},{"location":"api/latest/#addall-function","text":"Function returns the updated list after adding all the values from the given list. Syntax OBJECT list:addAll( OBJECT to.list, OBJECT from.list) OBJECT list:addAll( OBJECT to.list, OBJECT from.list, BOOL is.distinct) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic to.list The list into which the values need to copied. OBJECT No Yes from.list The list from which the values are copied. OBJECT No Yes is.distinct If true returns list with distinct values false BOOL Yes Yes Examples EXAMPLE 1 list:putAll(toList, fromList) If toList contains values ('IBM', 'WSO2), and if fromList contains values ('IBM', 'XYZ') then the function returns updated toList with values ('IBM', 'WSO2', 'IBM', 'XYZ'). EXAMPLE 2 list:putAll(toList, fromList, true) If toList contains values ('IBM', 'WSO2), and if fromList contains values ('IBM', 'XYZ') then the function returns updated toList with values ('IBM', 'WSO2', 'XYZ').","title":"addAll (Function)"},{"location":"api/latest/#clear-function","text":"Function returns the cleared list. Syntax OBJECT list:clear( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list which needs to be cleared OBJECT No Yes Examples EXAMPLE 1 list:clear(stockDetails) Returns an empty list.","title":"clear (Function)"},{"location":"api/latest/#clone-function","text":"Function returns the cloned list. Syntax OBJECT list:clone( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to which needs to be cloned. OBJECT No Yes Examples EXAMPLE 1 list:clone(stockSymbols) Function returns cloned list of stockSymbols.","title":"clone (Function)"},{"location":"api/latest/#contains-function","text":"Function checks whether the list contains the specific value. Syntax BOOL list:contains( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked on whether it contains the value or not. OBJECT No Yes value The value that needs to be checked. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:contains(stockSymbols, 'IBM') Returns 'true' if the stockSymbols list contains value IBM else it returns false .","title":"contains (Function)"},{"location":"api/latest/#containsall-function","text":"Function checks whether the list contains all the values in the given list. Syntax BOOL list:containsAll( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked on whether it contains all the values or not. OBJECT No Yes given.list The list which contains all the values to be checked. OBJECT No Yes Examples EXAMPLE 1 list:containsAll(stockSymbols, latestStockSymbols) Returns 'true' if the stockSymbols list contains values in latestStockSymbols else it returns false .","title":"containsAll (Function)"},{"location":"api/latest/#containsany-function","text":"Function checks whether the two specified lists have any common elements. Syntax BOOL list:containsAny( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked on whether it contains any of the values or not. OBJECT No Yes given.list The list which contains any of the values to be checked. OBJECT No Yes Examples EXAMPLE 1 list:containsAny(stockSymbols, latestStockSymbols) Returns 'true' if the stockSymbols list contains any value in latestStockSymbols else it returns false .","title":"containsAny (Function)"},{"location":"api/latest/#create-function","text":"Function creates a list containing all values provided. Syntax OBJECT list:create() OBJECT list:create( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value1) OBJECT list:create( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value1, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic value1 Value 1 OBJECT INT LONG FLOAT DOUBLE BOOL STRING Yes Yes Examples EXAMPLE 1 list:create(1, 2, 3, 4, 5, 6) This returns a list with values 1 , 2 , 3 , 4 , 5 and 6 . EXAMPLE 2 list:create() This returns an empty list.","title":"create (Function)"},{"location":"api/latest/#get-function","text":"Function returns the value at the specific index, null if index is out of range. Syntax OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING list:get( OBJECT list, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list Attribute containing the list OBJECT No Yes index Index of the element INT No Yes Examples EXAMPLE 1 list:get(stockSymbols, 1) This returns the element in the 1st index in the stockSymbols list.","title":"get (Function)"},{"location":"api/latest/#indexof-function","text":"Function returns the last index of the given element. Syntax INT list:indexOf( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to be checked to get index of an element. OBJECT No Yes value Value for which last index needs to be identified. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:indexOf(stockSymbols. `IBM`) Returns the last index of the element IBM if present else it returns -1.","title":"indexOf (Function)"},{"location":"api/latest/#isempty-function","text":"Function checks if the list is empty. Syntax BOOL list:isEmpty( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be checked whether it's empty or not. OBJECT No Yes Examples EXAMPLE 1 list:isEmpty(stockSymbols) Returns 'true' if the stockSymbols list is empty else it returns false .","title":"isEmpty (Function)"},{"location":"api/latest/#islist-function","text":"Function checks if the object is type of a list. Syntax BOOL list:isList( OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING arg) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic arg The argument the need to be determined whether it's a list or not. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:isList(stockSymbols) Returns 'true' if the stockSymbols is and an instance of java.util.List else it returns false .","title":"isList (Function)"},{"location":"api/latest/#lastindexof-function","text":"Function returns the index of the given value. Syntax INT list:lastIndexOf( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to be checked to get index of an element. OBJECT No Yes value Value for which last index needs to be identified. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:lastIndexOf(stockSymbols. `IBM`) Returns the last index of the element IBM if present else it returns -1.","title":"lastIndexOf (Function)"},{"location":"api/latest/#remove-function","text":"Function returns the updated list after removing the element with the specified value. Syntax OBJECT list:remove( OBJECT list, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes value The value of the element that needs to removed. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:remove(stockSymbols, 'IBM') This returns the updated list, stockSymbols after stockSymbols the value IBM .","title":"remove (Function)"},{"location":"api/latest/#removeall-function","text":"Function returns the updated list after removing all the element with the specified list. Syntax OBJECT list:removeAll( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes given.list The list with all the elements that needs to removed. OBJECT No Yes Examples EXAMPLE 1 list:removeAll(stockSymbols, latestStockSymbols) This returns the updated list, stockSymbols after removing all the values in latestStockSymbols.","title":"removeAll (Function)"},{"location":"api/latest/#removebyindex-function","text":"Function returns the updated list after removing the element with the specified index. Syntax OBJECT list:removeByIndex( OBJECT list, INT index) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes index The index of the element that needs to removed. INT No Yes Examples EXAMPLE 1 list:removeByIndex(stockSymbols, 0) This returns the updated list, stockSymbols after removing value at 0 th index.","title":"removeByIndex (Function)"},{"location":"api/latest/#retainall-function","text":"Function returns the updated list after retaining all the elements in the specified list. Syntax OBJECT list:retainAll( OBJECT list, OBJECT given.list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list that needs to be updated. OBJECT No Yes given.list The list with all the elements that needs to reatined. OBJECT No Yes Examples EXAMPLE 1 list:retainAll(stockSymbols, latestStockSymbols) This returns the updated list, stockSymbols after retaining all the values in latestStockSymbols.","title":"retainAll (Function)"},{"location":"api/latest/#setvalue-function","text":"Function returns the updated list after replacing the element in the given index by the given value. Syntax OBJECT list:setValue( OBJECT list, INT index, OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING value) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list to which the value should be updated. OBJECT No Yes index The index in which the value should to be updated. INT No Yes value The value to be updated with. OBJECT INT LONG FLOAT DOUBLE BOOL STRING No Yes Examples EXAMPLE 1 list:set(stockSymbols, 0, 'IBM') Function returns the updated list after replacing the value at 0th index with the value IBM","title":"setValue (Function)"},{"location":"api/latest/#size-function","text":"Function to return the size of the list. Syntax INT list:size( OBJECT list) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list for which size should be returned. OBJECT No Yes Examples EXAMPLE 1 list:size(stockSymbols) Returns size of the stockSymbols list.","title":"size (Function)"},{"location":"api/latest/#sort-function","text":"Function returns lists sorted in ascending or descending order. Syntax OBJECT list:sort( OBJECT list) OBJECT list:sort( OBJECT list, STRING order) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list The list which should be sorted. OBJECT No Yes order Order in which the list needs to be sorted (ASC/DESC/REV). REV STRING Yes No Examples EXAMPLE 1 list:sort(stockSymbols) Function returns the sorted list in ascending order. EXAMPLE 2 list:sort(stockSymbols, 'DESC') Function returns the sorted list in descending order.","title":"sort (Function)"},{"location":"api/latest/#tokenize-stream-processor","text":"Tokenize the list and return each key, value as new attributes in events Syntax list:tokenize( OBJECT list) list:tokenize( OBJECT list, OBJECT ...) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic list Array list which needs to be tokenized OBJECT No Yes Extra Return Attributes Name Description Possible Types index Index of an entry consisted in the list INT value Value of an entry consisted in the list OBJECT Examples EXAMPLE 1 list:tokenize(customList) If custom list contains ('WSO2', 'IBM', 'XYZ') elements, then tokenize function will return 3 events with value attributes WSO2, IBM and XYZ respectively.","title":"tokenize (Stream Processor)"}]}